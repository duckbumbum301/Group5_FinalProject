// ========== Simple Product Grid Render (for demo) ==========
function renderProductGridHTML(products) {
  return `
    <div class="product-grid">
      ${products.map(p => `
        <div class="product-card">
          <img src="images/${p.img||'default.jpg'}" alt="${p.name}">
          <h4>${p.name}</h4>
          <div class="price">
            <span class="sale-price">${money(p.price)}</span>
            <span class="original-price">${p.oldPrice ? money(p.oldPrice) : ''}</span>
          </div>
          <button class="buy-button" onclick="addToCart('${p.id}', 1)">MUA</button>
        </div>
      `).join('')}
    </div>
  `;
}

// H√†m n√†y c√≥ th·ªÉ g·ªçi ƒë·ªÉ test l∆∞·ªõi s·∫£n ph·∫©m ƒë∆°n gi·∫£n
function showSimpleProductGrid(cat) {
  const grid = document.getElementById('productGrid');
  if (!grid) return;
  const items = PRODUCTS.filter(p => p.cat === cat);
  grid.innerHTML = renderProductGridHTML(items);
}
/* V·ª±a Vui V·∫ª ‚Äî Expanded JS (no backend) */

// ========= Utilities =========
const $ = (sel, root = document) => root.querySelector(sel);
const $$ = (sel, root = document) => [...root.querySelectorAll(sel)];
const money = n => n.toLocaleString('vi-VN', { style:'currency', currency:'VND', maximumFractionDigits:0 });
const debounce = (fn, d=300) => { let t; return (...a)=>{ clearTimeout(t); t=setTimeout(()=>fn(...a), d); }; };
const uid = () => Math.random().toString(36).slice(2,10).toUpperCase();

// ========= i18n (minimal) =========
const I18N = {
  vi: {
    "nav.home":"Trang ch·ªß","nav.products":"S·∫£n ph·∫©m","nav.recipes":"C√¥ng th·ª©c","nav.orders":"ƒê∆°n h√†ng","nav.account":"T√†i kho·∫£n",
    "order.detail":"Chi ti·∫øt ƒë∆°n h√†ng","order.status":"Tr·∫°ng th√°i:","order.pending":"Ch·ªù x·ª≠ l√Ω","order.confirmed":"ƒê√£ x√°c nh·∫≠n","order.delivered":"ƒê√£ giao","order.cancelled":"ƒê√£ h·ªßy",
    "btn.search":"T√¨m ki·∫øm","btn.cart":"Gi·ªè h√†ng","btn.loadmore":"Hi·ªÉn th·ªã th√™m",
    "hero.title":"ƒêi ch·ª£ online, \n t∆∞∆°i ‚Äî nhanh ‚Äî vui","hero.desc":"Giao nhanh trong ng√†y, h√†ng t∆∞∆°i m·ªói s√°ng. C√¥ng th·ª©c g·ª£i √Ω v√† ‚Äúth√™m t·∫•t c·∫£ v√†o gi·ªè‚Äù.",
    "promo.free":"Mi·ªÖn ph√≠ giao ‚â• 299k","promo.veg":"Gi·∫£m 15% Rau & C·ªß","promo.fresh":"T∆∞∆°i m·ªõi m·ªói ng√†y",
    "section.products":"S·∫£n ph·∫©m","section.recipes":"Tr·ª£ l√Ω c√¥ng th·ª©c","section.orders":"ƒê∆°n h√†ng","section.account":"T√†i kho·∫£n",
    "filter.fav":"Ch·ªâ xem Y√™u th√≠ch","filter.perpage":"Hi·ªÉn th·ªã:","filter.category":"Danh m·ª•c:","filter.sort":"S·∫Øp x·∫øp:","filter.maxprice":"Gi√° t·ªëi ƒëa:",
    "category.all":"T·∫•t c·∫£","category.veg":"Rau c·ªß","category.fruit":"Tr√°i c√¢y","category.meat":"Th·ªãt & c√°","category.dry":"ƒê·ªì kh√¥","category.drink":"ƒê·ªì u·ªëng",
    "sort.pop":"Ph·ªï bi·∫øn","sort.asc":"Gi√° ‚Üë","sort.desc":"Gi√° ‚Üì","sort.name":"T√™n A‚ÜíZ",
    "tag.organic":"H·ªØu c∆°","tag.best":"B√°n ch·∫°y",
    "recipe.servings":"Kh·∫©u ph·∫ßn:","recipe.addall":"Th√™m t·∫•t c·∫£ v√†o gi·ªè","recipe.hint":"Ch·ªçn m√≥n trong g·ª£i √Ω ƒë·ªÉ ƒë√∫ng c√¥ng th·ª©c d·ªØ li·ªáu m·∫´u.",
    "product.nutrition":"Dinh d∆∞·ª°ng","product.related":"G·ª£i √Ω li√™n quan","product.qty":"SL:","product.add":"Th√™m v√†o gi·ªè",
    "cart.title":"Gi·ªè h√†ng","cart.apply":"√Åp d·ª•ng","cart.subtotal":"T·∫°m t√≠nh","cart.shipping":"Ph√≠ giao","cart.total":"T·ªïng c·ªông","cart.checkout":"Thanh to√°n",
    "checkout.title":"Thanh to√°n","checkout.step1":"1. ƒê·ªãa ch·ªâ giao h√†ng","checkout.step2":"2. X√°c nh·∫≠n & thanh to√°n","checkout.step3":"3. Ho√†n t·∫•t",
    "account.slot":"Ch·ªçn khung gi·ªù giao","account.save":"L∆∞u th√¥ng tin"
  },
  en: {
    "nav.home":"Home","nav.products":"Products","nav.recipes":"Recipes","nav.orders":"Orders","nav.account":"Account",
    "btn.search":"Search","btn.cart":"Cart","btn.loadmore":"Load more",
    "hero.title":"Shop fresh online,\n fast & joyful","hero.desc":"Same-day delivery. Fresh every morning. Recipe suggestions with add-all-to-cart.",
    "promo.free":"Free ship ‚â• 299k","promo.veg":"-15% Veggies","promo.fresh":"Fresh daily",
    "section.products":"Products","section.recipes":"Recipe Assistant","section.orders":"Orders","section.account":"Account",
    "filter.fav":"Favorites only","filter.perpage":"Per page:","filter.category":"Category:","filter.sort":"Sort:","filter.maxprice":"Max price:",
    "category.all":"All","category.veg":"Vegetables","category.fruit":"Fruits","category.meat":"Fresh Meat","category.seafood":"Seafood","category.frozen":"Frozen Foods","category.spice":"Seasonings","category.dry":"Dry goods","category.drink":"Drinks",
    "sort.pop":"Popular","sort.asc":"Price ‚Üë","sort.desc":"Price ‚Üì","sort.name":"Name A‚ÜíZ",
    "tag.organic":"Organic","tag.best":"Bestseller",
    "recipe.servings":"Servings:","recipe.addall":"Add all to cart","recipe.hint":"Pick a suggested recipe to match sample data.",
    "product.nutrition":"Nutrition","product.related":"Related items","product.qty":"Qty:","product.add":"Add to cart",
    "cart.title":"Cart","cart.apply":"Apply","cart.subtotal":"Subtotal","cart.shipping":"Shipping","cart.total":"Grand total","cart.checkout":"Checkout",
    "checkout.title":"Checkout","checkout.step1":"1. Shipping Address","checkout.step2":"2. Review & Pay","checkout.step3":"3. Done",
    "account.slot":"Select delivery slot","account.save":"Save"
  }
};

// ========= Data =========
const PRODUCTS = [
  // B√°nh k·∫πo c√≥ h√¨nh ·∫£nh, gi√° khuy·∫øn m√£i, gi√° g·ªëc, ph·∫ßn trƒÉm gi·∫£m gi√°
  {id:'bk1', name:'B√°nh tuy·∫øt Mochi khoai m√¥n ph√¥ mai 450g', cat:'biscuits', price:90000, unit:'H·ªôp 450g', stock:true, pop:90, emoji:'', img:'mochi-khoai-mon.jpg', oldPrice:290000, discount:69, rating:4.8, reviewCount:35, nutrition:'Khoai m√¥n, ph√¥ mai, b·ªôt n·∫øp.'},
  {id:'bk2', name:'B√°nh n∆∞·ªõng Mochi khoai m√¥n ch√† b√¥ng 500g', cat:'biscuits', price:90000, unit:'H·ªôp 500g', stock:true, pop:85, emoji:'', img:'mochi-cha-bong.jpg', oldPrice:290000, discount:69, rating:4.7, reviewCount:28, nutrition:'Khoai m√¥n, ch√† b√¥ng, b·ªôt m√¨.'},
  {id:'bk3', name:'H·ªôp 4 b√°nh trung thu B·∫£o Ng·ªçc Thu B√¨nh An xanh', cat:'biscuits', price:125000, unit:'H·ªôp 4 b√°nh', stock:true, pop:80, emoji:'', img:'trungthu-xanh.jpg', oldPrice:250000, discount:50, rating:4.9, reviewCount:41, nutrition:'B·ªôt m√¨, tr·ª©ng, ƒë·∫≠u xanh.'},
  {id:'bk4', name:'H·ªôp 4 b√°nh trung thu B·∫£o Ng·ªçc Thu B√¨nh An cam', cat:'biscuits', price:125000, unit:'H·ªôp 4 b√°nh', stock:true, pop:78, emoji:'', img:'trungthu-cam.jpg', oldPrice:250000, discount:50, rating:4.9, reviewCount:39, nutrition:'B·ªôt m√¨, tr·ª©ng, ƒë·∫≠u xanh.'},
  {id:'bk5', name:'H·ªôp 6 b√°nh trung thu Momoyama v·ªã tr√† 300g', cat:'biscuits', price:90000, unit:'H·ªôp 6 b√°nh', stock:true, pop:75, emoji:'', img:'momoyama-tra.jpg', oldPrice:450000, discount:80, rating:4.8, reviewCount:22, nutrition:'B·ªôt tr√† xanh, ƒë·∫≠u ƒë·ªè.'},
  {id:'bk6', name:'H·ªôp 4 b√°nh trung thu Boni truy·ªÅn th·ªëng 200g', cat:'biscuits', price:50000, unit:'H·ªôp 4 b√°nh', stock:true, pop:70, emoji:'', img:'boni-truyen-thong.jpg', oldPrice:198000, discount:75, rating:4.7, reviewCount:18, nutrition:'B·ªôt m√¨, ƒë·∫≠u xanh.'},
  {id:'bk7', name:'H·ªôp 4 b√°nh trung thu H·ªØu Ngh·ªã Momiji Mochi 200g', cat:'biscuits', price:190000, unit:'H·ªôp 4 b√°nh', stock:true, pop:68, emoji:'', img:'huunghi-mochi.jpg', oldPrice:380000, discount:50, rating:4.8, reviewCount:25, nutrition:'B·ªôt n·∫øp, ƒë·∫≠u ƒë·ªè.'},
  {id:'bk8', name:'B√°nh trung thu Ph√∫c An th·∫≠p c·∫©m tr·ª©ng 120g', cat:'biscuits', price:15000, unit:'G√≥i 120g', stock:true, pop:65, emoji:'', img:'phucan-trung.jpg', oldPrice:59000, discount:75, rating:4.6, reviewCount:17, nutrition:'Th·∫≠p c·∫©m, tr·ª©ng mu·ªëi.'},
  {id:'bk9', name:'B√°nh trung thu chay Ph√∫c An th·∫≠p c·∫©m 120g', cat:'biscuits', price:15000, unit:'G√≥i 120g', stock:true, pop:60, emoji:'', img:'phucan-chay.jpg', oldPrice:59000, discount:75, rating:4.5, reviewCount:13, nutrition:'Th·∫≠p c·∫©m chay.'},
  // B√°nh k·∫πo
  {id:'p40', name:'B√°nh quy b∆° (200g)', cat:'biscuits', price:32000, unit:'h·ªôp', stock:true, pop:40, emoji:'üç™', tags:['bestseller'], nutrition:'B∆°, b·ªôt m√¨, ƒë∆∞·ªùng.', rating:4.7, reviewCount:25},
  {id:'p41', name:'K·∫πo d·∫ªo tr√°i c√¢y (100g)', cat:'biscuits', price:18000, unit:'g√≥i', stock:true, pop:32, emoji:'üç¨', tags:[], nutrition:'ƒê∆∞·ªùng, gelatin, h∆∞∆°ng tr√°i c√¢y.', rating:4.5, reviewCount:14},
  {id:'p42', name:'B√°nh x·ªëp socola (150g)', cat:'biscuits', price:27000, unit:'g√≥i', stock:true, pop:28, emoji:'üç´', tags:[], nutrition:'Socola, b·ªôt m√¨, s·ªØa.', rating:4.6, reviewCount:19},
  {id:'p43', name:'B√°nh g·∫°o v·ªã rong bi·ªÉn (90g)', cat:'biscuits', price:22000, unit:'g√≥i', stock:true, pop:22, emoji:'üçò', tags:['organic'], nutrition:'G·∫°o, rong bi·ªÉn.', rating:4.4, reviewCount:11},
  {id:'p44', name:'K·∫πo s·ªØa m·ªÅm (120g)', cat:'biscuits', price:21000, unit:'g√≥i', stock:true, pop:18, emoji:'üç≠', tags:[], nutrition:'S·ªØa, ƒë∆∞·ªùng.', rating:4.3, reviewCount:8},
  // S·∫£n ph·∫©m m·ªõi b·ªï sung
  {id:'p27', name:'D∆∞a h·∫•u (1kg)', cat:'fruit', price:32000, unit:'kg', stock:true, pop:58, emoji:'üçâ', tags:['organic'], nutrition:'Gi√†u n∆∞·ªõc, vitamin C.', rating:4.5, reviewCount:21},
  {id:'p28', name:'Khoai t√¢y (500g)', cat:'veg', price:17000, unit:'g√≥i', stock:true, pop:49, emoji:'ü•î', tags:[], nutrition:'Tinh b·ªôt, vitamin B6.', rating:4.3, reviewCount:15},
  {id:'p29', name:'S·ªØa chua (4 h·ªôp)', cat:'dairy', price:28000, unit:'l·ªëc', stock:true, pop:37, emoji:'üç¶', tags:['bestseller'], nutrition:'Probiotic, canxi.', rating:4.7, reviewCount:33},
  {id:'p30', name:'Tr·ª©ng g√† ta (10 qu·∫£)', cat:'eggs', price:39000, unit:'v·ªâ', stock:true, pop:61, emoji:'ü•ö', tags:[], nutrition:'Protein, vitamin D.', rating:4.6, reviewCount:27},
  {id:'p31', name:'B√°nh m√¨ sandwich (400g)', cat:'breakfast', price:25000, unit:'·ªï', stock:true, pop:44, emoji:'üçû', tags:[], nutrition:'Carb, ch·∫•t x∆°.', rating:4.4, reviewCount:18},
  {id:'p32', name:'Nho M·ªπ (500g)', cat:'fruit', price:69000, unit:'h·ªôp', stock:true, pop:53, emoji:'üçá', tags:['bestseller'], nutrition:'Ch·∫•t ch·ªëng oxy h√≥a.', rating:4.8, reviewCount:41},
  // Rau c·ªß
  {id:'p1',  name:'B√≠ ƒë·ªè (500g)',       cat:'veg',   price:25000,  unit:'g√≥i',  stock:true,  pop:80, emoji:'üéÉ', tags:['organic'], nutrition:'Gi√†u beta-carotene, ch·∫•t x∆°.', rating: 4.7, reviewCount: 82},
  {id:'p2',  name:'Rau mu·ªëng (400g)',   cat:'veg',   price:18000,  unit:'b√≥',   stock:true,  pop:86, emoji:'ü•¨', tags:['bestseller'], nutrition:'Vitamin A, C; ch·∫•t x∆°.', rating: 4.5, reviewCount: 68},
  {id:'p3',  name:'C·∫£i th√¨a (400g)',    cat:'veg',   price:22000,  unit:'b√≥',   stock:true,  pop:60, emoji:'ü•ó', tags:['organic'], nutrition:'Canxi, vitamin K.', rating: 4.3, reviewCount: 41},
  {id:'p4',  name:'C√† r·ªët (500g)',      cat:'veg',   price:21000,  unit:'g√≥i',  stock:true,  pop:55, emoji:'ü•ï', tags:['bestseller'], nutrition:'Beta-carotene, ch·∫•t x∆°.', rating: 4.6, reviewCount: 55},
  {id:'p5',  name:'H√†nh l√° (100g)',     cat:'veg',   price:8000,   unit:'b√≥',   stock:true,  pop:74, emoji:'üßÖ', tags:[], nutrition:'Vitamin K, h·ª£p ch·∫•t l∆∞u hu·ª≥nh.', rating: 4.2, reviewCount: 23},

  // Tr√°i c√¢y
  {id:'p6',  name:'T√°o Fuji (1kg)',     cat:'fruit', price:65000,  unit:'kg',   stock:true,  pop:92, emoji:'üçé', tags:['bestseller'], nutrition:'Ch·∫•t x∆°, vitamin C.', rating: 4.8, reviewCount: 97},
  {id:'p7',  name:'Chu·ªëi (1kg)',        cat:'fruit', price:38000,  unit:'kg',   stock:true,  pop:70, emoji:'üçå', tags:[], nutrition:'Kali, nƒÉng l∆∞·ª£ng t·ª± nhi√™n.', rating: 4.4, reviewCount: 36},
  {id:'p8',  name:'Cam s√†nh (1kg)',     cat:'fruit', price:52000,  unit:'kg',   stock:true,  pop:68, emoji:'üçä', tags:['organic'], nutrition:'Vitamin C, ch·∫•t ch·ªëng oxy h√≥a.', rating: 4.6, reviewCount: 44},

  // Th·ªãt t∆∞∆°i
  {id:'p9',  name:'Th·ªãt heo ba r·ªçi (300g)', cat:'meat', price:76000, unit:'khay', stock:true, pop:88, emoji:'ü•ì', tags:[], nutrition:'Protein, ch·∫•t b√©o.', rating: 4.5, reviewCount: 51},
  {id:'p10', name:'Phi l√™ g√† (300g)',   cat:'meat',  price:52000,  unit:'khay', stock:true,  pop:64, emoji:'üçó', tags:['bestseller'], nutrition:'Protein n·∫°c.', rating: 4.7, reviewCount: 62},
  {id:'p11', name:'Th·ªãt b√≤ xay (300g)', cat:'meat',  price:85000,  unit:'khay', stock:true,  pop:75, emoji:'ü•©', tags:[], nutrition:'Protein, s·∫Øt, k·∫Ωm.', rating: 4.4, reviewCount: 29},
  {id:'p12', name:'·ª®c g√† (400g)',       cat:'meat',  price:48000,  unit:'khay', stock:true,  pop:70, emoji:'üçó', tags:['organic'], nutrition:'Protein n·∫°c, √≠t b√©o.', rating: 4.3, reviewCount: 18},

  // H·∫£i s·∫£n
  {id:'p13', name:'C√° basa phi l√™ (400g)', cat:'seafood', price:54000, unit:'khay', stock:true, pop:73, emoji:'üêü', tags:[], nutrition:'Omega-3, protein.', rating: 4.5, reviewCount: 33},
  {id:'p14', name:'T√¥m s√∫ (300g)',      cat:'seafood', price:120000, unit:'khay', stock:true, pop:82, emoji:'ü¶ê', tags:['bestseller'], nutrition:'Protein, canxi.', rating: 4.8, reviewCount: 54},
  {id:'p15', name:'M·ª±c t∆∞∆°i (300g)',    cat:'seafood', price:95000,  unit:'khay', stock:true, pop:78, emoji:'ü¶ë', tags:[], nutrition:'Protein, kho√°ng ch·∫•t.', rating: 4.6, reviewCount: 27},

  // ƒê·ªì ƒë√¥ng l·∫°nh
  {id:'p16', name:'Vi√™n b√≤ vi√™n (500g)', cat:'frozen', price:65000, unit:'g√≥i', stock:true, pop:65, emoji:'üîµ', tags:[], nutrition:'Protein.', rating: 4.2, reviewCount: 12},
  {id:'p17', name:'C√° vi√™n (500g)',     cat:'frozen', price:55000, unit:'g√≥i', stock:true, pop:60, emoji:'üîµ', tags:[], nutrition:'Protein c√°.', rating: 4.1, reviewCount: 9},
  {id:'p18', name:'T√¥m vi√™n (500g)',    cat:'frozen', price:75000, unit:'g√≥i', stock:true, pop:62, emoji:'üîµ', tags:[], nutrition:'Protein h·∫£i s·∫£n.', rating: 4.3, reviewCount: 11},

  // Gia v·ªã & N√™m n·∫øm
  {id:'p19', name:'N∆∞·ªõc m·∫Øm 500ml',     cat:'spice',  price:32000,  unit:'chai', stock:true, pop:84, emoji:'üßÇ', tags:[], nutrition:'ƒê·∫°m c√° l√™n men.', rating: 4.5, reviewCount: 21},
  {id:'p20', name:'D·∫ßu ƒÉn 1L',          cat:'spice',  price:52000,  unit:'chai', stock:true, pop:76, emoji:'ÔøΩ', tags:[], nutrition:'Lipid; d√πng v·ª´a ƒë·ªß.', rating: 4.3, reviewCount: 15},
  {id:'p21', name:'H·∫°t n√™m 500g',       cat:'spice',  price:42000,  unit:'g√≥i',  stock:true, pop:80, emoji:'üßÇ', tags:['bestseller'], nutrition:'Gia v·ªã t·ªïng h·ª£p.', rating: 4.6, reviewCount: 32},
  {id:'p22', name:'B·ªôt ng·ªçt 500g',      cat:'spice',  price:35000,  unit:'g√≥i',  stock:true, pop:75, emoji:'üßÇ', tags:[], nutrition:'B·ªôt gia v·ªã.', rating: 4.2, reviewCount: 10},

  // ƒê·ªì kh√¥
  {id:'p23', name:'G·∫°o ST25 (5kg)',     cat:'dry',   price:180000, unit:'t√∫i',  stock:true,  pop:95, emoji:'üçö', tags:['bestseller'], nutrition:'Carb ph·ª©c, √≠t t·∫°p ch·∫•t.', rating: 4.9, reviewCount: 120},
  {id:'p24', name:'M√¨ g√≥i (th√πng 30)',  cat:'dry',   price:120000, unit:'th√πng', stock:true, pop:88, emoji:'üçú', tags:[], nutrition:'Ti·ªán l·ª£i.', rating: 4.4, reviewCount: 38},

  // ƒê·ªì u·ªëng
  {id:'p25', name:'S·ªØa t∆∞∆°i 1L',        cat:'drink', price:34000,  unit:'h·ªôp',  stock:true,  pop:71, emoji:'ü•õ', tags:[], nutrition:'Canxi, protein.', rating: 4.5, reviewCount: 19},
  {id:'p26', name:'N∆∞·ªõc kho√°ng 500ml',  cat:'drink', price:6000,   unit:'chai', stock:true,  pop:50, emoji:'üíß', tags:['bestseller'], nutrition:'Kho√°ng ch·∫•t, n∆∞·ªõc.', rating: 4.3, reviewCount: 14},
];

const RECIPES = [
  { name:'Canh b√≠ ƒë·ªè', servings:2, items:[
    {match:'B√≠ ƒë·ªè', qty:1}, {match:'Th·ªãt heo ba r·ªçi', qty:1}, {match:'H√†nh l√°', qty:1}, {match:'N∆∞·ªõc m·∫Øm', qty:1},
  ]},
  { name:'Canh chua c√°', servings:2, items:[
    {match:'C√° basa', qty:1}, {match:'C√† r·ªët', qty:1}, {match:'H√†nh l√°', qty:1}, {match:'N∆∞·ªõc m·∫Øm', qty:1},
  ]},
  { name:'Rau mu·ªëng x√†o', servings:2, items:[
    {match:'Rau mu·ªëng', qty:1}, {match:'D·∫ßu ƒÉn', qty:1}, {match:'N∆∞·ªõc m·∫Øm', qty:1},
  ]},
];

// ========= State =========
const LS_CART   = 'vvv_cart';
const LS_FAV    = 'vvv_fav';
const LS_LANG   = 'vvv_lang';
const LS_THEME  = 'vvv_theme';
const LS_COUPON = 'vvv_coupon';
const LS_ACCT   = 'vvv_account';
const LS_ORDERS = 'vvv_orders';

let cart = {};              // { productId: qty }
let favs = new Set();       // Set<productId>
let lang = 'vi';
let theme = 'light';
let coupon = '';
let account = null;
let orders = [];
let visibleCount = 12;

let filters = {
  q: '', cat:'all', sort:'pop', priceMax:250000, favOnly:false,
  tagOrganic:false, tagBestseller:false
};

// ========= DOM Refs =========
const yearEl = $('#year');
const gridEl = $('#productGrid');
const priceRange = $('#priceRange');
const priceValue = $('#priceValue');
const searchToggle = $('#searchToggle');
const orderModal = $('#orderModal');
const orderDetail = $('#orderDetail');
const orderActions = $('#orderActions');
const orderModalClose = $('#orderModalClose');
const searchbar = $('#searchbar');
const searchInput = $('#searchInput');
const sortSelect = $('#sortSelect');
const catFilter = $('#categoryFilter');
const favOnly = $('#favOnly');
const perPage = $('#perPage');
const tagOrganic = $('#tagOrganic');
const tagBestseller = $('#tagBestseller');
const loadMoreBtn = $('#loadMoreBtn');

const langToggle = $('#langToggle');
const themeToggle = $('#themeToggle');

const cartOpenBtn = $('#cartOpenBtn');
const cartBadge = $('#cartBadge');
const cartDrawer = $('#cartDrawer');
const cartOverlay = $('#cartOverlay');
const cartCloseBtn = $('#cartCloseBtn');
const cartItems = $('#cartItems');
const cartSubtotal = $('#cartSubtotal');
const cartShip = $('#cartShip');
const cartGrand = $('#cartGrand');
const applyCouponBtn = $('#applyCouponBtn');
const couponInput = $('#couponInput');
const checkoutBtn = $('#checkoutBtn');

const recipeInput = $('#recipeInput');
const recipeList = $('#recipeList');
const servings = $('#servings');
const recipeAddAllBtn = $('#recipeAddAllBtn');

const ordersList = $('#ordersList');

const accountForm = $('#accountForm');
const accountMsg = $('#accountMsg');

const pm = $('#productModal');
const pmPanel = $('#productModalPanel');
const pmClose = $('#pmClose');
const pmTitle = $('#pmTitle');
const pmThumb = $('#pmThumb');
const pmPrice = $('#pmPrice');
const pmTags = $('#pmTags');
const pmNutri = $('#pmNutri');
const pmRelated = $('#pmRelated');
const pmQty = $('#pmQty');
const pmAddBtn = $('#pmAddBtn');

const checkoutDlg = $('#checkout');
const checkoutClose = $('#checkoutClose');
const coStage = $('#coStage');

const toastBox = $('#toast');

// ========= Category Management =========
function showProductsByCategory(category) {
  $('.category-grid').style.display = 'none';
  $('.products-section').style.display = 'block';
  
  filters.cat = category;
  visibleCount = +perPage.value;
  render();
}

function backToCategories() {
  $('.category-grid').style.display = 'grid';
  $('.products-section').style.display = 'none';
}

// ========= Init =========
function init(){
  yearEl.textContent = new Date().getFullYear();

  try {
    cart = JSON.parse(localStorage.getItem(LS_CART) || '{}');
    favs = new Set(JSON.parse(localStorage.getItem(LS_FAV) || '[]'));
    lang = localStorage.getItem(LS_LANG) || 'vi';
    theme = localStorage.getItem(LS_THEME) || 'light';
    coupon = localStorage.getItem(LS_COUPON) || '';
    account = JSON.parse(localStorage.getItem(LS_ACCT) || 'null');
    orders = JSON.parse(localStorage.getItem(LS_ORDERS) || '[]');
  } catch {}

  if (theme === 'dark') document.documentElement.classList.add('dark');

  // Datalist recipes
  recipeList.innerHTML = RECIPES.map(r=>`<option value="${r.name}"></option>`).join('');

  // Listeners
  // Category navigation
  $$('.subcategory-list a').forEach(a => {
    a.addEventListener('click', (e) => {
      e.preventDefault();
      const category = e.target.getAttribute('data-category');
      showProductsByCategory(category);
    });
  });
  
  $('#backToCategories').addEventListener('click', backToCategories);
  
  searchToggle.addEventListener('click', toggleSearchbar);
  searchInput.addEventListener('input', debounce(e => { filters.q = (e.target.value||'').trim().toLowerCase(); render(); }, 250));

  catFilter.addEventListener('change', e => { filters.cat = e.target.value; resetVisible(); render(); });
  sortSelect.addEventListener('change', e => { filters.sort = e.target.value; render(); });
  priceRange.addEventListener('input', e => { filters.priceMax = +e.target.value; priceValue.textContent = `‚â§ ${money(filters.priceMax)}`; render(); });
  favOnly.addEventListener('change', e => { filters.favOnly = e.target.checked; resetVisible(); render(); });

  perPage.addEventListener('change', e => { visibleCount = +e.target.value; render(); });
  tagOrganic.addEventListener('change', e => { filters.tagOrganic = e.target.checked; resetVisible(); render(); });
  tagBestseller.addEventListener('change', e => { filters.tagBestseller = e.target.checked; resetVisible(); render(); });

  loadMoreBtn.addEventListener('click', ()=>{ visibleCount += +perPage.value; render(); });

  langToggle.addEventListener('click', toggleLang);
  themeToggle.addEventListener('click', toggleTheme);

  cartOpenBtn.addEventListener('click', openCart);
  cartCloseBtn.addEventListener('click', closeCart);
  cartOverlay.addEventListener('click', closeCart);
  document.addEventListener('keydown', e => { if (e.key === 'Escape'){ if (pm.open) pm.close(); closeCart(); } });

  gridEl.addEventListener('click', onGridClick);

  cartItems.addEventListener('click', onCartClick);
  cartItems.addEventListener('input', onCartQtyInput);
  applyCouponBtn.addEventListener('click', applyCoupon);
  checkoutBtn.addEventListener('click', openCheckout);

  pmAddBtn.addEventListener('click', e => { e.preventDefault(); addToCart(pm.dataset.id, +pmQty.value||1); toast('ƒê√£ th√™m v√†o gi·ªè.'); });
  pmPanel.addEventListener('click', e => {
    const rel = e.target.closest('[data-related]');
    if(rel){ const pid = rel.getAttribute('data-related'); openProduct(pid); }
  });

  recipeAddAllBtn.addEventListener('click', addRecipeToCart);

  accountForm.addEventListener('submit', onSaveAccount);
  
  // Order detail handlers
  ordersList.addEventListener('click', e => {
    const btn = e.target.closest('[data-action="viewOrder"]');
    if (btn) {
      const orderId = btn.getAttribute('data-order-id');
      openOrderDetail(orderId);
    }
  });

  checkoutClose.addEventListener('click', ()=> checkoutDlg.close());

  // First paint
  priceValue.textContent = `‚â§ ${money(filters.priceMax)}`;
  render();
  renderOrders();
  hydrateAccountForm();
  couponInput.value = coupon;
  applyI18n();
}

function resetVisible(){ visibleCount = +perPage.value; }

// ========= Rendering =========
function applyI18n(){
  const dict = I18N[lang] || I18N.vi;
  $$('[data-i18n]').forEach(el=>{
    const k = el.getAttribute('data-i18n');
    if (dict[k]) el.textContent = dict[k];
  });
  // hero title supports line break with \n
  const heroTitle = $$('[data-i18n="hero.title"]')[0];
  if (heroTitle) heroTitle.innerHTML = (dict["hero.title"]||'').replace('\n','<br>');
}

function render(){
  let items = PRODUCTS.filter(p => p.stock && p.price <= filters.priceMax);
  if (filters.cat !== 'all') items = items.filter(p => p.cat === filters.cat);
  if (filters.q) items = items.filter(p => p.name.toLowerCase().includes(filters.q));
  if (filters.favOnly) items = items.filter(p => favs.has(p.id));
  if (filters.tagOrganic) items = items.filter(p => p.tags?.includes('organic'));
  if (filters.tagBestseller) items = items.filter(p => p.tags?.includes('bestseller'));

  // sort
  if (filters.sort === 'priceAsc') items.sort((a,b)=>a.price-b.price);
  else if (filters.sort === 'priceDesc') items.sort((a,b)=>b.price-a.price);
  else if (filters.sort === 'nameAsc') items.sort((a,b)=>a.name.localeCompare(b.name,'vi'));
  else items.sort((a,b)=>b.pop-a.pop);

  const total = items.length;
  const slice = items.slice(0, visibleCount);
  gridEl.innerHTML = slice.map(cardHTML).join('') || `<p class="muted">Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p.</p>`;
  $('#loadMoreBtn').style.display = (visibleCount < total) ? 'inline-flex' : 'none';

  renderCart();
}

function cardHTML(p){
  const catClass = ({veg:'thumb--veg',fruit:'thumb--fruit',meat:'thumb--meat',dry:'thumb--dry',drink:'thumb--drink',biscuits:'thumb--veg'})[p.cat] || 'thumb--veg';
  const favPressed = favs.has(p.id) ? 'true':'false';
  const chips = (p.tags||[]).map(t=>`<span class="chip">${t==='organic'?'H·ªØu c∆°':'B√°n ch·∫°y'}</span>`).join('');
  // N·∫øu c√≥ h√¨nh ·∫£nh th√¨ hi·ªÉn th·ªã ·∫£nh, gi√° khuy·∫øn m√£i, gi√° g·ªëc, ph·∫ßn trƒÉm gi·∫£m gi√°
  if (p.cat === 'biscuits' && p.img) {
    return `
    <article class="card" data-id="${p.id}">
      <button class="thumb ${catClass}" data-action="detail" aria-label="${p.name}" style="padding:0;background:none;">
        <img src="images/${p.img}" alt="${p.name}" style="width:100%;height:120px;object-fit:cover;border-radius:10px;">
      </button>
      <div class="name" style="min-height:38px;">${p.name}</div>
      <div class="meta" style="flex-direction:column;align-items:flex-start;gap:2px;">
        <div>
          <span class="price" style="color:#e53935;font-weight:700;font-size:18px;">${money(p.price)}/${p.unit}</span>
          <span style="text-decoration:line-through;color:#888;font-size:13px;margin-left:6px;">${p.oldPrice ? money(p.oldPrice) : ''}</span>
          <span style="color:#d32f2f;font-size:13px;margin-left:4px;">${p.discount ? '-'+p.discount+'%' : ''}</span>
        </div>
        <div class="rating-row"><span class="star">‚≠ê</span> <span class="rating-num">${p.rating?.toFixed(1) ?? '0.0'}</span> <span class="review-count">(${p.reviewCount ?? 0} ƒë√°nh gi√°)</span></div>
      </div>
      <div class="kit">
        <button class="btn fav" aria-pressed="${favPressed}" data-action="fav">‚ù§Ô∏è</button>
        <button class="btn" data-action="add">Th√™m</button>
        <button class="btn" data-action="detail">Chi ti·∫øt</button>
      </div>
    </article>`;
  }
  // ...c√°c lo·∫°i s·∫£n ph·∫©m kh√°c gi·ªØ nguy√™n...
  return `
  <article class="card" data-id="${p.id}">
    <button class="thumb ${catClass}" data-action="detail" aria-label="${p.name}">${p.emoji||'üõí'}</button>
    <div class="name">${p.name}</div>
    <div class="rating-row"><span class="star">‚≠ê</span> <span class="rating-num">${p.rating?.toFixed(1) ?? '0.0'}</span> <span class="review-count">(${p.reviewCount ?? 0} ƒë√°nh gi√°)</span></div>
    <div class="pm-tags">${chips}</div>
    <div class="meta">
      <span class="price">${money(p.price)}</span>
      <div class="kit">
        <button class="btn fav" aria-pressed="${favPressed}" data-action="fav">‚ù§Ô∏è</button>
        <button class="btn" data-action="detail">Chi ti·∫øt</button>
        <button class="btn btn--pri" data-action="add">Th√™m</button>
      </div>
    </div>
  </article>`;
}

function renderCart(){
  const entries = Object.entries(cart).filter(([,q])=>q>0);
  const lines = entries.map(([pid, qty])=>{
    const p = PRODUCTS.find(x=>x.id===pid);
    if(!p) return '';
    return `
      <div class="cart-item" data-id="${p.id}">
        <div>
          <strong>${p.name}</strong>
          <div class="muted">${money(p.price)} ‚Ä¢ ${p.unit}</div>
        </div>
        <div class="qty">
          <label for="qty-${p.id}" class="muted">SL:</label>
          <input id="qty-${p.id}" type="number" min="1" step="1" value="${qty}" data-action="qty">
        </div>
        <button class="btn btn--icon" data-action="remove">X√≥a</button>
      </div>
    `;
  }).join('');
  cartItems.innerHTML = lines || `<p class="muted">Gi·ªè h√†ng ƒëang tr·ªëng.</p>`;

  const subtotal = entries.reduce((s,[pid,q])=>{
    const p = PRODUCTS.find(x=>x.id===pid);
    return s + (p ? p.price*q : 0);
  },0);

  const discount = calcDiscount(subtotal);
  const after = Math.max(subtotal - discount, 0);
  const shipping = calcShipping(after);

  cartSubtotal.textContent = money(subtotal);
  cartShip.textContent = money(shipping);
  cartGrand.textContent = money(after + shipping);

  const count = entries.reduce((s,[,q])=>s+q,0);
  cartBadge.textContent = count;

  // persist
  localStorage.setItem(LS_CART, JSON.stringify(cart));
  localStorage.setItem(LS_FAV, JSON.stringify([...favs]));
}

function calcDiscount(subtotal){
  if (!coupon) return 0;
  if (coupon === 'VUI10') return Math.floor(subtotal * 0.10);
  return 0;
}

function calcShipping(amount){
  const FREE_THRES = 299000;
  if (coupon === 'FREESHIP') return 0;
  return amount >= FREE_THRES ? 0 : 20000;
}

function renderOrders(){
  if (!orders?.length){
    ordersList.innerHTML = `<p class="muted">Ch∆∞a c√≥ ƒë∆°n h√†ng.</p>`;
    return;
  }
  ordersList.innerHTML = orders.map(o=>{
    const items = o.items.map(i=>`<li>${i.name} √ó ${i.qty}</li>`).join('');
    const status = o.status || 'pending';
  const statusText = ({
    pending: 'Ch·ªù x·ª≠ l√Ω',
    confirmed: 'ƒê√£ x√°c nh·∫≠n',
    delivered: 'ƒê√£ giao h√†ng',
    cancelled: 'ƒê√£ h·ªßy'
  })[status] || 'Ch·ªù x·ª≠ l√Ω';

  return `
      <div class="order">
        <div>
          <strong>ƒê∆°n #${o.id}</strong> ‚Ä¢ ${new Date(o.ts).toLocaleString('vi-VN')}
          <span class="status status--${status}">${statusText}</span>
        </div>
        <div class="muted">Ng∆∞·ªùi nh·∫≠n: ${o.account?.name} ‚Ä¢ ${o.account?.phone} ‚Ä¢ ${o.account?.address} (${o.account?.slot})</div>
        <ul>${items}</ul>
        <div class="order-actions">
          <div><strong>T·ªïng:</strong> ${money(o.total)}</div>
          <button class="btn" data-order-id="${o.id}" data-action="viewOrder">Xem chi ti·∫øt</button>
        </div>
      </div>
    `;
  }).join('');
}

function hydrateAccountForm(){
  if (!account) return;
  for (const el of accountForm.elements){
    if (el.name && account[el.name] !== undefined) el.value = account[el.name];
  }
}

// ========= Events =========
function toggleSearchbar(){
  const isHidden = searchbar.hasAttribute('hidden');
  if (isHidden){ searchbar.removeAttribute('hidden'); searchToggle.setAttribute('aria-expanded','true'); searchInput.focus(); }
  else { searchbar.setAttribute('hidden',''); searchToggle.setAttribute('aria-expanded','false'); }
}

function onGridClick(e){
  const btn = e.target.closest('[data-action]');
  if (!btn) return;
  const card = e.target.closest('.card');
  const pid = card?.getAttribute('data-id');
  const action = btn.getAttribute('data-action');

  if (action === 'add') addToCart(pid, 1);
  if (action === 'fav') toggleFav(pid, btn);
  if (action === 'detail') openProduct(pid);
}

function onCartClick(e){
  const btn = e.target.closest('[data-action="remove"]');
  if (!btn) return;
  const wrap = e.target.closest('.cart-item');
  const pid = wrap?.getAttribute('data-id');
  if (pid){ delete cart[pid]; render(); }
}

function onCartQtyInput(e){
  const input = e.target.closest('[data-action="qty"]');
  if (!input) return;
  const wrap = e.target.closest('.cart-item');
  const pid = wrap?.getAttribute('data-id');
  let val = parseInt(input.value,10);
  if (Number.isNaN(val) || val < 1) val = 1;
  cart[pid] = val;
  renderCart();
}

function addToCart(pid, qty=1){
  cart[pid] = (cart[pid] || 0) + qty;
  renderCart();
  toast('ƒê√£ th√™m v√†o gi·ªè.');
}

function toggleFav(pid, btn){
  if (favs.has(pid)) favs.delete(pid); else favs.add(pid);
  if (btn) btn.setAttribute('aria-pressed', favs.has(pid) ? 'true':'false');
  localStorage.setItem(LS_FAV, JSON.stringify([...favs]));
  if (filters.favOnly) render();
}

function applyCoupon(){
  coupon = (couponInput.value||'').trim().toUpperCase();
  if (coupon && !['VUI10','FREESHIP'].includes(coupon)){
    toast('M√£ kh√¥ng h·ª£p l·ªá. D√πng VUI10 ho·∫∑c FREESHIP.');
    coupon = '';
  } else {
    toast(coupon ? `ƒê√£ √°p d·ª•ng m√£ ${coupon}.` : 'ƒê√£ g·ª° m√£.');
  }
  localStorage.setItem(LS_COUPON, coupon);
  renderCart();
}

function addRecipeToCart(){
  const r = findRecipeByName(recipeInput.value);
  if (!r){ alert('Kh√¥ng t√¨m th·∫•y c√¥ng th·ª©c trong d·ªØ li·ªáu m·∫´u.'); return; }
  const mul = Math.max(parseInt(servings.value,10)||1,1) / (r.servings||1);
  let added = 0;
  for (const it of r.items){
    const p = PRODUCTS.find(x=>x.name.toLowerCase().includes(it.match.toLowerCase()));
    const q = Math.max(1, Math.round((it.qty||1)*mul));
    if (p && q>0){ addToCart(p.id, q); added += q; }
  }
  openCart();
  if (added) toast(`ƒê√£ th√™m ${added} m·ª•c t·ª´ c√¥ng th·ª©c.`);
}

function findRecipeByName(name){
  const key = (name||'').trim().toLowerCase();
  return RECIPES.find(r => r.name.toLowerCase() === key);
}

function onSaveAccount(e){
  e.preventDefault();
  const fd = new FormData(e.target);
  const data = Object.fromEntries(fd.entries());
  if (!data.name || !data.phone || !data.address || !data.slot){
    accountMsg.textContent = 'Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin.';
    return;
  }
  account = data;
  localStorage.setItem(LS_ACCT, JSON.stringify(account));
  accountMsg.textContent = 'ƒê√£ l∆∞u th√¥ng tin.';
  toast('L∆∞u th√¥ng tin t√†i kho·∫£n th√†nh c√¥ng.');
}

function openCart(){ cartDrawer.removeAttribute('hidden'); }
function closeCart(){ cartDrawer.setAttribute('hidden',''); }

// Product Modal
function openProduct(pid){
  const p = PRODUCTS.find(x=>x.id===pid);
  if (!p) return;
  pm.dataset.id = p.id;
  pmTitle.textContent = p.name;
  pmThumb.textContent = p.emoji || 'üõí';
  pmPrice.textContent = money(p.price);
  pmTags.innerHTML = (p.tags||[]).map(t=>`<span class="chip">${t==='organic'?'H·ªØu c∆°':'B√°n ch·∫°y'}</span>`).join('');
  pmNutri.textContent = p.nutrition || '';
  pmQty.value = 1;

  // Hi·ªÉn th·ªã rating chi ti·∫øt
  const pmRating = document.getElementById('pmRating');
  if (pmRating) {
    pmRating.innerHTML = `<span class="star">‚≠ê</span> <span class="rating-num">${p.rating?.toFixed(1) ?? '0.0'}</span> <span class="review-count">(${p.reviewCount ?? 0} ƒë√°nh gi√°)</span>`;
  }

  // Hi·ªÉn th·ªã 2-3 b√¨nh lu·∫≠n m·∫´u
  const pmReviewsList = document.getElementById('pmReviewsList');
  if (pmReviewsList) {
    pmReviewsList.innerHTML = [
      {user: 'Ng·ªçc', comment: 'S·∫£n ph·∫©m r·∫•t t∆∞∆°i v√† ngon!'},
      {user: 'Minh', comment: 'ƒê√≥ng g√≥i c·∫©n th·∫≠n, giao h√†ng nhanh.'},
      {user: 'Lan', comment: 'Gi√° h·ª£p l√Ω, s·∫Ω ·ªßng h·ªô ti·∫øp.'}
    ].slice(0, Math.floor(2 + Math.random())).map(r =>
      `<div class="review-item"><strong>${r.user}</strong>: <span>${r.comment}</span></div>`
    ).join('');
  }

  // X·ª≠ l√Ω submit form ƒë√°nh gi√°
  const pmReviewForm = document.getElementById('pmReviewForm');
  if (pmReviewForm) {
    pmReviewForm.onsubmit = function(e) {
      e.preventDefault();
      const user = document.getElementById('pmReviewUser').value.trim();
      const comment = document.getElementById('pmReviewComment').value.trim();
      if (!user || !comment) return;
      const reviewHTML = `<div class="review-item"><strong>${user}</strong>: <span>${comment}</span></div>`;
      if (pmReviewsList) pmReviewsList.insertAdjacentHTML('afterbegin', reviewHTML);
      pmReviewForm.reset();
      toast('C·∫£m ∆°n b·∫°n ƒë√£ ƒë√°nh gi√°!');
    };
  }

  // related
  const related = PRODUCTS.filter(x=>x.cat===p.cat && x.id!==p.id).slice(0,4);
  pmRelated.innerHTML = related.map(r=>`
    <button class="card" data-related="${r.id}">
      <div class="thumb ${catClassOf(r)}" aria-hidden="true">${r.emoji||'üõí'}</div>
      <div class="name">${r.name}</div>
      <div class="price">${money(r.price)}</div>
    </button>
  `).join('');
  if (!pm.open) pm.showModal();
}
function catClassOf(p){
  return ({veg:'thumb--veg',fruit:'thumb--fruit',meat:'thumb--meat',dry:'thumb--dry',drink:'thumb--drink'})[p.cat] || 'thumb--veg';
}

// Checkout
function openCheckout(){
  if (!Object.values(cart).some(q=>q>0)){ toast('Gi·ªè h√†ng tr·ªëng.'); return; }
  if (!account){ toast('Vui l√≤ng l∆∞u th√¥ng tin t√†i kho·∫£n tr∆∞·ªõc.'); location.hash='#account'; return; }
  closeCart();
  renderCheckoutStage1();
  if (!checkoutDlg.open) checkoutDlg.showModal();
}
function renderCheckoutStage1(){
  markStep(1);
  coStage.innerHTML = `
    <div class="account">
      <div><strong>Ng∆∞·ªùi nh·∫≠n:</strong> ${account.name}</div>
      <div><strong>ƒêi·ªán tho·∫°i:</strong> ${account.phone}</div>
      <div><strong>ƒê·ªãa ch·ªâ:</strong> ${account.address}</div>
      <div><strong>Khung gi·ªù:</strong> ${account.slot}</div>
      <button class="btn btn--pri" id="coNext1">Ti·∫øp t·ª•c</button>
    </div>
  `;
  $('#coNext1').addEventListener('click', renderCheckoutStage2);
}
function renderCheckoutStage2(){
  markStep(2);
  const items = Object.entries(cart).filter(([,q])=>q>0).map(([pid,q])=>{
    const p = PRODUCTS.find(x=>x.id===pid); return `<li>${p?.name||pid} √ó ${q} ‚Äî ${money((p?.price||0)*q)}</li>`;
  }).join('');
  const subtotal = Object.entries(cart).reduce((s,[pid,q])=>{ const p = PRODUCTS.find(x=>x.id===pid); return s + (p ? p.price*q : 0); },0);
  const discount = calcDiscount(subtotal);
  const after = Math.max(subtotal - discount, 0);
  const shipping = calcShipping(after);
  const total = after + shipping;

  coStage.innerHTML = `
    <div>
      <ul>${items}</ul>
      <p><strong>T·∫°m t√≠nh:</strong> ${money(subtotal)}</p>
      <p><strong>Gi·∫£m gi√°:</strong> -${money(discount)} ${coupon?`(<code>${coupon}</code>)`:''}</p>
      <p><strong>Ph√≠ giao:</strong> ${money(shipping)}</p>
      <p style="font-size:18px"><strong>T·ªïng c·ªông:</strong> ${money(total)}</p>
      <button class="btn" id="coBack1">Quay l·∫°i</button>
      <button class="btn btn--pri" id="coPay">X√°c nh·∫≠n ƒë·∫∑t h√†ng</button>
    </div>
  `;
  $('#coBack1').addEventListener('click', renderCheckoutStage1);
  $('#coPay').addEventListener('click', ()=> finalizeOrder(total));
}
function finalizeOrder(total){
  markStep(3);
  const id = uid();
  // build items
  const items = Object.entries(cart).filter(([,q])=>q>0).map(([pid,q])=>{
    const p = PRODUCTS.find(x=>x.id===pid); return {id:pid, name:p?.name||pid, qty:q, price:p?.price||0};
  });
  const order = { id, ts:Date.now(), account, items, total, coupon };
  orders.unshift(order);
  localStorage.setItem(LS_ORDERS, JSON.stringify(orders));
  // clear cart
  cart = {};
  localStorage.setItem(LS_CART, JSON.stringify(cart));
  renderCart();
  renderOrders();

  coStage.innerHTML = `
    <div>
      <p>ƒê·∫∑t h√†ng th√†nh c√¥ng! M√£ ƒë∆°n <strong>#${id}</strong>.</p>
      <p>Ch√∫ng t√¥i s·∫Ω giao trong khung gi·ªù: <strong>${account.slot}</strong>.</p>
      <button class="btn btn--pri" id="coDone">Xong</button>
    </div>
  `;
  $('#coDone').addEventListener('click', ()=> checkoutDlg.close());
}

// Steps UI
function markStep(n){
  $$('.steps li').forEach(li=>{
    li.classList.toggle('active', +li.getAttribute('data-step') === n);
  });
}

// Lang & Theme
function toggleLang(){
  lang = (lang === 'vi') ? 'en' : 'vi';
  localStorage.setItem(LS_LANG, lang);
  applyI18n();
  toast(lang==='vi'?'ƒê√£ chuy·ªÉn ti·∫øng Vi·ªát.':'Switched to English.');
}
function toggleTheme(){
  theme = (theme === 'light') ? 'dark' : 'light';
  document.documentElement.classList.toggle('dark', theme==='dark');
  localStorage.setItem(LS_THEME, theme);
}

// Toast
function toast(msg, ms=2200){
  const el = document.createElement('div');
  el.className = 't';
  el.textContent = msg;
  toastBox.appendChild(el);
  setTimeout(()=> el.remove(), ms);
}

// Order Status Management
function updateOrderStatus(orderId, newStatus) {
  const orderIndex = orders.findIndex(o => o.id === orderId);
  if (orderIndex === -1) return;

  orders[orderIndex] = {
    ...orders[orderIndex],
    status: newStatus,
    statusUpdateTime: Date.now()
  };

  localStorage.setItem(LS_ORDERS, JSON.stringify(orders));
  renderOrders();
  openOrderDetail(orderId);
  toast('ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng.');
}

// Order Detail Modal
function openOrderDetail(orderId) {
  const order = orders.find(o => o.id === orderId);
  if (!order) return;

  const status = order.status || 'pending';
  const statusText = ({
    pending: 'Ch·ªù x·ª≠ l√Ω',
    confirmed: 'ƒê√£ x√°c nh·∫≠n',
    delivered: 'ƒê√£ giao h√†ng',
    cancelled: 'ƒê√£ h·ªßy'
  })[status] || 'Ch·ªù x·ª≠ l√Ω';

  const items = order.items.map(i => {
    const total = i.price * i.qty;
    return `
      <div class="order-item">
        <div>
          <strong>${i.name}</strong>
          <div class="muted">${money(i.price)} √ó ${i.qty}</div>
        </div>
        <div>${money(total)}</div>
      </div>
    `;
  }).join('');

  const subtotal = order.items.reduce((s, i) => s + (i.price * i.qty), 0);
  const shipping = calcShipping(subtotal);
  const discount = order.coupon ? calcDiscount(subtotal) : 0;

  orderDetail.innerHTML = `
    <div class="order-detail">
      <div class="order-info">
        <div><strong>M√£ ƒë∆°n:</strong> #${order.id}</div>
        <div><strong>Ng√†y ƒë·∫∑t:</strong> ${new Date(order.ts).toLocaleString('vi-VN')}</div>
        <div><strong data-i18n="order.status">Tr·∫°ng th√°i:</strong> <span class="status status--${status}">${statusText}</span></div>
        ${order.statusUpdateTime ? `<div class="muted">C·∫≠p nh·∫≠t: ${new Date(order.statusUpdateTime).toLocaleString('vi-VN')}</div>` : ''}
      </div>
      
      <div class="shipping-info">
        <h4>Th√¥ng tin giao h√†ng:</h4>
        <div><strong>Ng∆∞·ªùi nh·∫≠n:</strong> ${order.account.name}</div>
        <div><strong>ƒêi·ªán tho·∫°i:</strong> ${order.account.phone}</div>
        <div><strong>ƒê·ªãa ch·ªâ:</strong> ${order.account.address}</div>
        <div><strong>Khung gi·ªù:</strong> ${order.account.slot}</div>
      </div>

      <div class="items-list">
        <h4>Danh s√°ch s·∫£n ph·∫©m:</h4>
        ${items}
      </div>

      <div class="order-summary">
        <div class="total-row"><span>T·∫°m t√≠nh:</span> <span>${money(subtotal)}</span></div>
        <div class="total-row"><span>Ph√≠ giao h√†ng:</span> <span>${money(shipping)}</span></div>
        ${discount ? `<div class="total-row"><span>Gi·∫£m gi√° (${order.coupon}):</span> <span>-${money(discount)}</span></div>` : ''}
        <div class="total-row total-row--grand"><span>T·ªïng c·ªông:</span> <span>${money(order.total)}</span></div>
      </div>
    </div>
  `;

  // Render action buttons based on current status
  const actionButtons = [];
  
  if (status === 'pending') {
    actionButtons.push(
      `<button class="btn btn--pri" onclick="updateOrderStatus('${order.id}', 'confirmed')">X√°c nh·∫≠n ƒë∆°n</button>`,
      `<button class="btn" onclick="updateOrderStatus('${order.id}', 'cancelled')">H·ªßy ƒë∆°n</button>`
    );
  } else if (status === 'confirmed') {
    actionButtons.push(
      `<button class="btn btn--pri" onclick="updateOrderStatus('${order.id}', 'delivered')">X√°c nh·∫≠n ƒë√£ nh·∫≠n h√†ng</button>`,
      `<button class="btn" onclick="updateOrderStatus('${order.id}', 'cancelled')">H·ªßy ƒë∆°n</button>`
    );
  }

  orderActions.innerHTML = actionButtons.length ? `
    <div class="order-actions-menu">
      ${actionButtons.join('')}
    </div>
  ` : '';

  orderModal.showModal();
}

// ========= Start =========
init();
